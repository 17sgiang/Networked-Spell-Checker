/*
 * File: spellcheck.c
 * Author: Steven Giang
 * Course: 3207-003: Operating Systems
 * Lab 3: Networked Spell Checker
 * Created on November 7, 2019, 12:03 PM
 * Create a spell-checking that multiple users can connect to and send words
 * to be spell-checked.
 * 
 */


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
//#include <sys/types.h>
//#include <sys/stat.h>
//#include <fcntl.h>
#include <string.h>

//  Declaration of constants or global variables
const char error_message[30] = "An error has occurred";
const int BUFFER_SIZE = 1024;
const int MAX_WORD_SIZE = 64;
//  Declaration of structs


//------------------------------------------------------------------------//
//                         FUNCTION DECLARATION                           //
//------------------------------------------------------------------------//



//------------------------------------------------------------------------//
//                           MAIN FUNCTION                                //
//------------------------------------------------------------------------//

int main(int argc, char** argv) {
    
    printf("1");
    
    //Open a file pointer to the dictionary and copy its contents
    //to the dictionary string array
//    const int BUFFER_SIZE = 1024;
//    const int MAX_WORD_SIZE = 64;
//    const char error_message[30] = "An error has occured";
    
    printf("2");
    
    char** dictionary = calloc((size_t) BUFFER_SIZE,(int)(sizeof(char) * MAX_WORD_SIZE));
    char* buffer = malloc((int)(sizeof(char) * MAX_WORD_SIZE));
    int index = 0;
    int len = 0;
    int c;
    int dict_size = BUFFER_SIZE;
    
    FILE* fp = fopen("words-2.txt", "r");
    
    //Error opening dictionary
    if(fp == NULL){
        printf("%s\n", error_message);
        printf("%s\n", "Failed to open dictionary file.");
        return (EXIT_FAILURE);
    }
    c = fgetc(fp);
    //Copy each line from the file until EOF is reached
    while(c != EOF){
        
        //  Reallocate if dictionary is filled
        if(index == dict_size){
            dict_size += BUFFER_SIZE;
            dictionary = realloc(dictionary, (int)(sizeof(char*) * dict_size));
        }
        
        if(c == '\n'){
            dictionary[index][len] = '\0';
            len = 0;
            index++;
        } else {
            dictionary[index][len++] = c;
        }
        c = fgetc(fp);
    }
    
//    while(fgets(buffer, MAX_WORD_SIZE, (FILE*)fp) != NULL){
//        
////        printf("%s\n", dictionary[index]);
//        index++;
//        //  Reallocate if dictionary is filled
//        if(index == dict_size){
//            dict_size += BUFFER_SIZE;
//            dictionary = realloc(dictionary, (int)(sizeof(char*) * dict_size));
//        }
////        dictionary[index++] = buffer;
////        strcpy(dictionary[index++], buffer);
////        fflush(fp);
//    }
    //Close the file pointer
    fclose(fp);
    
    for(int i = 0; i < 10; i++){
        printf("%s\n", dictionary[i]);
        
    }
    
    
    //Create queue for incoming socket descriptors
    //Synchronization mechanisms
    //Set up network connection
    //Worker threads
    //Open a socket on a port
    //Wait for clients to connect
    
    //If client connects
    //Socket descriptor will be created
    //Flagged?
    //Socket descriptor put on queue that worker threads take from
    //Wait for a word from the client
    //Run spellchecker
    //Report result to the client
    //Wait for more words/terminate
    return (EXIT_SUCCESS);
}




//------------------------------------------------------------------------//
//                       FUNCTION IMPLEMENTATION                          //
//------------------------------------------------------------------------//